package com.dev.langbotchain.langchain4j.spring.MessageAnalyzer.KeyWords;

import java.util.List;

public class Code {
    public static final List<String> CODING_SENTENCES = List.of(
            "What's the difference between Java and JavaScript?",
            "How do I implement a bubble sort algorithm in Python?",
            "Can you explain the concept of object-oriented programming?",
            "What are the best practices for error handling in JavaScript?",
            "What is the purpose of a constructor in Java?",
            "Is it possible to use regular expressions in C++?",
            "What's the difference between a compiler and an interpreter?",
            "Can you recommend any resources for learning React.js?",
            "How do I debug a segmentation fault in C?",
            "What are some common design patterns used in software development?",
            "What is the difference between Git merge and rebase?",
            "What are the benefits of using version control software like Git?",
            "How can I improve the performance of my Python code?",
            "What is the significance of the 'this' keyword in JavaScript?",
            "How do I handle asynchronous operations in Node.js?",
            "What is the difference between synchronous and asynchronous programming?",
            "Can you explain the concept of polymorphism in object-oriented programming?",
            "How do I create a RESTful API using Spring Boot?",
            "What is the purpose of the 'finally' block in Java exception handling?",
            "How do I deploy a Django application to a production server?",
            "How do I handle concurrency issues in a multi-threaded Java application?",
            "What are some best practices for writing clean and maintainable code?",
            "How can I securely store passwords in a database?",
            "What are the differences between HTTP and HTTPS?",
            "How do I implement authentication and authorization in a web application?",
            "What are some common security vulnerabilities in web applications?",
            "Can you explain the concept of recursion?",
            "How do I write unit tests for my Java application?",
            "What is the purpose of the 'super' keyword in Java?",
            "How do I use dependency injection in Spring framework?",
            "What are some advantages of using a microservices architecture?",
            "How do I handle CORS issues in my Angular application?",
            "What is the difference between a function declaration and a function expression in JavaScript?",
            "Create a Program",
            "What's the difference between Java and JavaScript?",
            "How do I implement a bubble sort algorithm in Python?",
            "Can you explain the concept of object-oriented programming?",
            "What are the best practices for error handling in JavaScript?",
            "What is the purpose of a constructor in Java?",
            "Is it possible to use regular expressions in C++?",
            "What's the difference between a compiler and an interpreter?",
            "Can you recommend any resources for learning React.js?",
            "How do I debug a segmentation fault in C?",
            "What are some common design patterns used in software development?",
            "What is the difference between Git merge and rebase?",
            "What are the benefits of using version control software like Git?",
            "How can I improve the performance of my Python code?",
            "What is the significance of the 'this' keyword in JavaScript?",
            "How do I handle asynchronous operations in Node.js?",
            "What is the difference between synchronous and asynchronous programming?",
            "Can you explain the concept of polymorphism in object-oriented programming?",
            "How do I create a RESTful API using Spring Boot?",
            "What is the purpose of the 'finally' block in Java exception handling?",
            "How do I deploy a Django application to a production server?",
            "How do I handle concurrency issues in a multi-threaded Java application?",
            "What are some best practices for writing clean and maintainable code?",
            "How can I securely store passwords in a database?",
            "What are the differences between HTTP and HTTPS?",
            "How do I implement authentication and authorization in a web application?",
            "What are some common security vulnerabilities in web applications?",
            "Can you explain the concept of recursion?",
            "How do I write unit tests for my Java application?",
            "What is the purpose of the 'super' keyword in Java?",
            "How do I use dependency injection in Spring framework?",
            "What are some advantages of using a microservices architecture?",
            "How do I handle CORS issues in my Angular application?",
            "What is the difference between a function declaration and a function expression in JavaScript?",
            "Create a Program",
            "What are pointers in C and how do they work?",
            "How do I allocate memory dynamically in C?",
            "What are the differences between arrays and pointers in C?",
            "How do I read and write files in C?",
            "What is the difference between 'int main()' and 'void main()' in C?",
            "How do I pass arguments to a function by reference in C?",
            "How do I use structures and unions in C?",
            "What are the advantages and disadvantages of using C?",
            "How do I work with strings in C?",
            "What is the role of the preprocessor in C programming?",
            "How do I handle errors and exceptions in C?",
            "What are some common pitfalls in C programming?",
            "What is the difference between 'calloc()' and 'malloc()' in C?",
            "How do I implement recursion in C?",
            "What is the purpose of 'typedef' keyword in C?",
            "How do I create and use header files in C?",
            "What are some best practices for writing efficient C code?",
            "How do I debug C programs?",
            "How do i Program",
            "Create a C program",
            "Create a Java program",
            "Create a Python program",
            "Create a C++ program",
            "Write a program",
            "Code me a",
            "Coding in"
    );


    public static final List<String> CODING_KEYWORDS = List.of(
            "abstract",
            "access",
            "address",
            "ajax",
            "algorithm",
            "annotation",
            "API",
            "applet",
            "argument",
            "array",
            "assembly",
            "async",
            "attribute",
            "authentication",
            "auto",
            "backend",
            "bandwidth",
            "binary",
            "bit",
            "block",
            "boolean",
            "bootstrap",
            "branch",
            "buffer",
            "bug",
            "byte",
            "cache",
            "callback",
            "canvas",
            "case",
            "cast",
            "char",
            "class",
            "client",
            "closure",
            "cloud",
            "cluster",
            "cohesion",
            "comment",
            "compile",
            "component",
            "composite",
            "compress",
            "concatenate",
            "concurrency",
            "configuration",
            "console",
            "constant",
            "constructor",
            "container",
            "context",
            "control",
            "cookie",
            "CPU",
            "CRUD",
            "CSS",
            "C++",
            "cursor",
            "data",
            "database",
            "debug",
            "declaration",
            "default",
            "delegate",
            "delimiter",
            "dependency",
            "design",
            "destructuring",
            "development",
            "directive",
            "distributed",
            "divide",
            "DOM",
            "driver",
            "dynamic",
            "element",
            "encapsulation",
            "encryption",
            "endian",
            "entity",
            "environment",
            "error",
            "escape",
            "event",
            "exception",
            "execute",
            "expression",
            "factory",
            "fetch",
            "field",
            "file",
            "filter",
            "float",
            "font",
            "framework",
            "frontend",
            "function",
            "garbage",
            "gateway",
            "generics",
            "global",
            "GUI",
            "handle",
            "hash",
            "header",
            "heap",
            "hexadecimal",
            "host",
            "HTML",
            "HTTP",
            "HTTPS",
            "IDE",
            "identifier",
            "immutable",
            "implementation",
            "import",
            "index",
            "inference",
            "infinite",
            "inheritance",
            "inline",
            "instance",
            "integer",
            "interface",
            "interpreter",
            "iteration",
            "Java",
            "JavaScript",
            "JDBC",
            "JDK",
            "JIT",
            "join",
            "JSON",
            "kernel",
            "keyword",
            "library",
            "link",
            "list",
            "literal",
            "load",
            "local",
            "lock",
            "log",
            "loop",
            "machine",
            "macro",
            "manifest",
            "map",
            "markup",
            "match",
            "memory",
            "metadata",
            "method",
            "middleware",
            "microservices",
            "minify",
            "mock",
            "model",
            "module",
            "monitoring",
            "MVC",
            "namespace",
            "native",
            "network",
            "node",
            "object-oriented",
            "offline",
            "operation",
            "operator",
            "optimization",
            "package",
            "page",
            "parameter",
            "parser",
            "performance",
            "persistent",
            "PHP",
            "platform",
            "plugin",
            "pointer",
            "polymorphism",
            "portal",
            "porting",
            "post",
            "preprocessor",
            "print",
            "priority",
            "python",
            "process",
            "programming",
            "prompt",
            "property",
            "protocol",
            "prototype",
            "proxy",
            "queue",
            "RAD",
            "RAM",
            "random",
            "range",
            "React",
            "recompile",
            "record",
            "recursion",
            "redirection",
            "reference",
            "reflection",
            "react",
            "regexp",
            "register",
            "release",
            "render",
            "repository",
            "request",
            "resolution",
            "resource",
            "response",
            "rest",
            "reuse",
            "revision",
            "RFID",
            "router",
            "runtime",
            "safe",
            "sandbox",
            "SaaS",
            "scale",
            "scope",
            "script",
            "SDK",
            "search",
            "secure",
            "segmentation",
            "serialization",
            "server",
            "session",
            "setter",
            "shell",
            "singleton",
            "SOAP",
            "software",
            "source",
            "stack",
            "statement",
            "static",
            "storage",
            "stream",
            "string",
            "subclass",
            "subroutine",
            "syntax",
            "system",
            "tag",
            "template",
            "testing",
            "thread",
            "token",
            "trace",
            "transaction",
            "trigger",
            "try",
            "type",
            "unicode",
            "unit",
            "URI",
            "URL",
            "user",
            "utility",
            "validation",
            "variable",
            "vector",
            "version",
            "virtual",
            "VLAN",
            "volatile",
            "W3C",
            "web",
            "websocket",
            "while",
            "widget",
            "window",
            "wireframe",
            "wrapper",
            "WSDL",
            "XML",
            "XSD"
    );

}
